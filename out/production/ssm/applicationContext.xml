<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:util="http://www.springframework.org/schema/util"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
                       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
                       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
                       ">

      <!--什么是Spring的控制反转和依赖注入？？？？-->
      <!-- IOC控制反转-->
     <!-- <bean  id="userDao" class="com.yxq.dao.impl.UserDaoImpl" />


      <bean id="userService" class="com.yxq.service.impl.UserServiceImpl">
           &lt;!&ndash;DI依赖注入&ndash;&gt;
            <property name="userDao" ref="userDao"></property>
      </bean>-->


      <!--采用注解的方式实例化bean和注入属性-->
      <!--1.配置扫描包-->
     <context:component-scan base-package="com.xtq">
         <!--扫描除了controller控制器之外的所有注解  -->
         <context:exclude-filter type="annotation"
                                 expression="org.springframework.stereotype.Controller" />
     </context:component-scan>

    <!--2.读取配置文件 -->
    <context:property-placeholder location="classpath:*.properties" />

    <!--3.配置数据源-->
    <bean id="dataSource"   class="org.apache.commons.dbcp.BasicDataSource">
         <property name="driverClassName" value="${mysql.driverClassName}"/>
         <property name="url" value="${mysql.url}"/>
         <property name="username" value="${mysql.username}"/>
         <property name="password" value="${mysql.password}"/>
         <property name="initialSize" value="${mysql.initialSize}"/>
         <property name="maxActive" value="${mysql.maxActive}"/>
         <property name="maxIdle" value="${mysql.maxIdle}"/>
         <property name="minIdle" value="${mysql.minIdle}"/>
        <property name="maxWait" value="${mysql.maxWait}"/>
    </bean>


    <!--Spring整合Mybatis-->
    <!--4.配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource" />
        <!--配置别名:把entity所有类名取名为类名-->
         <property name="typeAliasesPackage" value="com.xtq.entity" />
        <!--注册mapper-->
        <property name="mapperLocations">
              <list>
                  <value>classpath:com/xtq/dao/mapper/*.xml</value>
              </list>
        </property>
       <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--5.配置扫描器: 将接口实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
         <property name="basePackage" value="com.xtq.dao"/>
    </bean>

    <!--6.配置事务管理器-->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
     </bean>

    <!-- 7.采用注解的方式添加事务-->
    <!-- 事务添加在哪一层： service层 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>